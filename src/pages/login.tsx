import {
  ErrorMessage,
  Infos,
  MainContainer,
  Moldura,
  Register,
  SaveButton,
  Title,
  UsuarioContainer,
  UsuarioContent,
} from '@/styles/login.styles'
import { FormEvent, useState } from 'react'
import axios from 'axios'
import { Oxygen } from 'next/font/google'
import Head from 'next/head'
import Background from '../../public/background1.png'
import * as z from 'zod'

const Vietnam = Oxygen({
  subsets: ['latin'],
  weight: ['300', '400', '700'],
})

const loginDTO = z.object({
  email: z.string().email('Por favor, digite um e-mail válido.'),
  senha: z.string().min(6, 'A senha deve conter no mínimo 6 caracteres'),
})

type loginDTO = z.infer<typeof loginDTO>

export default function CreateUser() {
  const [loginForm, setLoginForm] = useState({} as loginDTO)
  const [mensagemError, setMensagemError] = useState('')
  const [mensagemSucess, setMensagemSucess] = useState('')

  const enviarLogin = async (event: FormEvent) => {
    event.preventDefault()

    try {
      loginDTO.parse(loginForm)

      axios
        .post('http://localhost:5000/enviar-login', {
          ...loginForm,
        })
        .then((response) => {
          const token = response.data.token

          // Armazenar o token JWT no localStorage ou em um estado global (ex: Redux)
          localStorage.setItem('token', token)

          console.log(response.data)
          setMensagemSucess('Logado com sucesso!')

          window.location.href = '/'
        })
        .catch((error) => {
          console.error(error)
          if (error.response && error.response.status === 500) {
            setMensagemError('Falha no servidor.')
          } else if (error.response && error.response.status === 401) {
            setMensagemError('Credenciais inválidas')
          } else {
            setMensagemError('Erro ao realizar login')
          }
          setTimeout(() => {
            setMensagemError('')
          }, 3000)
        })
    } catch (error) {
      if (error instanceof z.ZodError) {
        // error.errors é um array com detalhes sobre cada erro
        for (const detail of error.errors) {
          setMensagemError(detail.message)
        }
      }
      setTimeout(() => {
        setMensagemError('')
      }, 3000)
    }
  }

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <MainContainer
        className={Vietnam.className}
        style={{
          backgroundImage: `url(${Background.src})`,
        }}
      >
        <UsuarioContainer onSubmit={enviarLogin}>
          <Moldura />

          <UsuarioContent>
            <Title>
              <h1>Faça Login!</h1>
              <p>Faça login em sua conta do protocolo pele perfeita!</p>
            </Title>

            <Infos>
              <label>E-mail:</label>
              <input
                type="text"
                value={loginForm.email}
                placeholder="Endereço de e-mail"
                onChange={(e) =>
                  setLoginForm((prevRegister) => ({
                    ...prevRegister,
                    email: e.target.value,
                  }))
                }
              />
            </Infos>

            <Infos>
              <label>Senha:</label>
              <input
                type="password"
                value={loginForm.senha}
                placeholder="Senha"
                onChange={(e) =>
                  setLoginForm((prevRegister) => ({
                    ...prevRegister,
                    senha: e.target.value,
                  }))
                }
              />
            </Infos>

            <div>
              {mensagemSucess && (
                <ErrorMessage type={'success'}>{mensagemSucess}</ErrorMessage>
              )}
              {mensagemError && <ErrorMessage>{mensagemError}</ErrorMessage>}
            </div>
            <SaveButton type="submit">Login</SaveButton>
            <Register>
              <p>Não tem uma conta?</p>
              <a href="/register">Cadastre-se</a>
            </Register>
          </UsuarioContent>
        </UsuarioContainer>
      </MainContainer>
    </>
  )
}
