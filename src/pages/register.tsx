import {
  ErrorMessage,
  Infos,
  MainContainer,
  Moldura,
  SaveButton,
  Title,
  UsuarioContainer,
  UsuarioContent,
} from '@/styles/register.styles'
import { FormEvent, useState } from 'react'
import axios from 'axios'
import { Oxygen } from 'next/font/google'
import Head from 'next/head'
import Background from '../../public/background1.webp'
import InputMask from 'react-input-mask'
import * as z from 'zod'

const Vietnam = Oxygen({
  subsets: ['latin'],
  weight: ['300', '400', '700'],
})

interface PhoneInputProps {
  value: string
  onChange: (value: string) => void
}

const PhoneInput = ({ value, onChange }: PhoneInputProps) => {
  return (
    <InputMask
      mask="(99) 99999-9999"
      value={value}
      onChange={(e) => onChange(e.target.value)}
    />
  )
}

const registerDto = z.object({
  nome: z
    .string()
    .min(3, 'Por favor, digite seu nome completo.')
    .includes(' ', { message: 'Por favor, digite seu nome completo.' }),
  email: z.string().email('Por favor, digite um e-mail válido.'),
  telefone: z.string().min(15, 'Por favor, digite um telefone válido'),
  senha: z.string().min(6, 'A senha deve conter no mínimo 6 caracteres'),
})

type RegisterDTO = z.infer<typeof registerDto>

export default function CreateUser() {
  const [registerForm, setRegisterForm] = useState({} as RegisterDTO)
  const [confirmarSenha, setConfirmarSenha] = useState('')
  const [mensagemSucess, setMensagemSucess] = useState('')
  const [mensagemError, setMensagemError] = useState('')

  const handlePhoneChange = (value: string) => {
    setRegisterForm((prevRegister) => ({
      ...prevRegister,
      telefone: value,
    }))
  }

  const enviarRegistro = async (event: FormEvent) => {
    event.preventDefault()

    try {
      registerDto.parse(registerForm)

      if (registerForm.senha !== confirmarSenha) {
        setMensagemError('As senhas não coincidem.')

        setTimeout(() => {
          setMensagemError('')
        }, 3000)
        return
      }

      const response = await axios.post(
        'https://websiteback.onrender.com/enviar-registro',
        {
          ...registerForm,
        },
      )

      console.log(response.data)
      setRegisterForm({} as RegisterDTO)
      setMensagemSucess('Usuário Criado Com Sucesso!')

      const token = response.data.token

      // Armazenar o token JWT no localStorage ou em um estado global (ex: Redux)
      localStorage.setItem('token', token)

      window.location.href = '/'
    } catch (error: any) {
      if (error instanceof z.ZodError) {
        // error.errors é um array com detalhes sobre cada erro
        for (const detail of error.errors) {
          setMensagemError(detail.message)
        }
      } else {
        let errorMessage = 'Erro ao enviar o E-mail.'

        if (error.response) {
          if (error.response.status === 500) {
            errorMessage = 'Falha no servidor.'
          } else if (error.response.status === 400) {
            errorMessage = 'E-mail já cadastrado.'
          }
        }

        setMensagemError(errorMessage)
      }
      setTimeout(() => {
        setMensagemError('')
      }, 3000)
    }
  }

  return (
    <>
      <Head>
        <title>Registre-se</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <MainContainer
        className={Vietnam.className}
        style={{
          backgroundImage: `url(${Background.src})`,
        }}
      >
        <UsuarioContainer onSubmit={enviarRegistro}>
          <Moldura />

          <UsuarioContent>
            <Title>
              <h1>Criar Usuário</h1>
              <p>
                Crie seu usuário do seu gosto. Quando estiver terminado clique
                em criar usuário.
              </p>
            </Title>

            <Infos>
              <label>Nome Completo:</label>
              <input
                type="text"
                value={registerForm.nome}
                onChange={(e) =>
                  setRegisterForm((prevRegister) => ({
                    ...prevRegister,
                    nome: e.target.value,
                  }))
                }
              />
            </Infos>
            <Infos>
              <label>E-mail:</label>
              <input
                type="text"
                value={registerForm.email}
                onChange={(e) =>
                  setRegisterForm((prevRegister) => ({
                    ...prevRegister,
                    email: e.target.value,
                  }))
                }
              />
            </Infos>
            <Infos>
              <label>Telefone:</label>
              <PhoneInput
                value={registerForm.telefone}
                onChange={handlePhoneChange}
              />
            </Infos>
            <Infos>
              <label>Senha:</label>
              <input
                type="password"
                value={registerForm.senha}
                onChange={(e) =>
                  setRegisterForm((prevRegister) => ({
                    ...prevRegister,
                    senha: e.target.value,
                  }))
                }
              />
            </Infos>
            <Infos>
              <label>Confirmar Senha:</label>
              <input
                type="password"
                value={confirmarSenha}
                onChange={(e) => setConfirmarSenha(e.target.value)}
              />
            </Infos>
            <div>
              {mensagemSucess && (
                <ErrorMessage type={'success'}>{mensagemSucess}</ErrorMessage>
              )}
              {mensagemError && <ErrorMessage>{mensagemError}</ErrorMessage>}
            </div>
            <SaveButton type="submit">Criar Usuário</SaveButton>
          </UsuarioContent>
        </UsuarioContainer>
      </MainContainer>
    </>
  )
}
